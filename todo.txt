system("ls -la /proc/$$/fd");
[V] more than 3 >>> error : syntax error near '>>'
[V] malloc: double free bij >>>
[V] file with quotes: open file without quotes
[V]     ; echo hoi should give syntax error near unexpected token ';'
[V] stderror juist doorgeven naar 1 plek
[V] fds worden steeds groter naarmate je meer commands achter elkaar uitvoerd && gebeurt niet bij pipes
[V] exit codes?
[V] env variables $PA shouldn't give path && only [$] works
[V] ~/bin/ //home substitution at ~
[V] test.c/: Not a directory
[V] /test.c/: No such file or directory
[V] segfault multiple pipes??
[V] Exit with a number should remember the number
[V] ctrl+c new process //detachen van main process en terminal niet mogelijk
[V] cd sdklgh, echo ||| lksghl, cd ksjdg segfault
[V] ./test.c: permission denied + holds de rest van de string?
[V] >< only / with echo
[V] <| only (wrong error) / echo <| echo hee (segfault)
[V] echo <> hoi / echo <> test.c -> '<>' is redirection operator (both R and WR)
[V] ft_strncmp: altijd lengte checken
[V] <> or ending with delimiter
[V] alle messages naar fd 2 printen
[V] echo hoi '|'| echo hey should seperate |
[V] echo |> echo hey should be seen as command
[V] malloc fails checken && exit(1)
[ ] altijd als we erroren (mallocs f.e.) free stuff aanroepen?
[V] exit values kloppend maken
[V] builtins met hoofdletters: dit hoeft niet, soms wel, soms niet
[V] sefault when touch '>>'
[V] cat ctrl+d leaks!!!
[V] ctrl+d echo $? should be 0
[V] exit with word: add bash before error
[V] exit 1 hoi: always putstr exit first
[V] exit with first words / first number etc. error handling
[V] run cat + cntrl \
[V] run cat + cntrl c
[V] run cat + cntrl d
[ ] cat "\""; en uberhaubt \ in double quotes
[ ] ~: cat ~/minishell/github_minishell/test.c
[V] /: cat /Users/iboeters/minishell/github_minishell/test.c
[V] error: //Users/iboeters/minishell/github_minishell/test.c
[ ] type awk: error without path to executable
[V] echo $"hallo" wrong output
[ ]echo $"HOME$"

Testing unset-------------------------------------------------------
[V] unset PATH
[V] unset blabla
[ ] unset $PATH / $LESS: first do check for dollar

Testing echo--------------------------------------------------------
[V] echo -n hoi
[V] echo -n -n -n hoi
[V] echo -n -nnnnnn hoi
[V] echo -n -nnna hoi
[V] echo -n -n hoi -n

Testing cat---------------------------------------------------------
[V] cat $HOME

Testing other commands----------------------------------------------
[V] ./
[V] //
[V] /
[V] ''
[V] ""
[V] touch >
[V] rm >

Testing pipes-------------------------------------------------------
[V] ./github_minishell/gnl/ > outfile //stderror redir needed
[V] error message absolute & relative path
[V] ./minishell
[V] ./minishell hoi hee hallo
[V] ./minishell hoi hee hallo > out
[V] pwd | cat
[V] pwd | cat > out
[V] | //ours: multiline command, real: syntax error near '|'
[V] na 1x output redirection: fd 6,7,8 etc. blijft vol zitten
[V] more than 709 pipes (ulimitis -u = max nbr of processes)

Testing pipes and redirections-------------------------------------
[V] mini_main.c > out //error message should be promted in terminal
[V] cat > output > output > output | echo hoi
[V] echo > file1 hello >file2 world! > file3 | cat -e
[V] ls >> file3 | cat < file3 //first: bash error && second time : file3 exists
[V] cat > output < output //error cat: input file is output file - should result in empty outfile
[V] cat > outfile | cat < outfile
[V] touch '>'; cat > '>'; cat '>'
[V] rm '>'
[V] echo hoi > gnl
[V] echo hoi < gnl
[V] echo hoi > $HOME




Tests github--------------------------------------------------------
[V] cat mini_main.c > out | grep if
[V] cat mini_main.c > out | > out1
[V] cat mini_main.c > out > out1 > out2 | echo hello
[V] cat mini_main.c > out > out1 > out2 | cat
[V] cat mini_main.c > out > out1 > out2 ; cat
[V] cat mini_main.c < input (input DOES NOT exist)
[V] cat mini_main.c < input (input DOES exist)
[V] cat mini_main.c | < input
[V] cat <int1 <int2 < int3
[V] dollar checking if there is an '=' check whats behind the '='
[V] echo $~
[V] export hoi = hallo should not go into env
[ ] leaked s in exec_cmd??
[V] echo -n -n -nnnnnnnnnn -nnnnnn should not print
[ ] everything norm

Testing for leaks
[ ] leaks in echo

Tests liewe----------------------------------------------------------
[V] cat /dev/urandom | head -c10 //should not hang
[V] cat | grep 42 //reoutput only if you give 42 in string
